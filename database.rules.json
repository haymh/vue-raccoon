{
  "rules": {
    "userRooms": {
      "$userId": {
        // only user self can read & write this
        ".read": "auth.uid === $userId",
        // only authenticated user in the same room can add other user in room
        ".write": "auth !== null || auth.uid === $userId",
        "$roomId": {
          // room must exist before user is added to the room
          ".write" : "root.child('rooms/' + $roomId + '/members/' + $userId).exists() && root.child('rooms/' + $roomId + '/members/' + auth.id).exists()",
        	"roomName": { ".validate": "newData.isString() && newData.val().length < 20" }
        }
      }
    },
    "rooms": {
      "$roomId": {
        // members in this room can read & write
        ".read": "data.child('members/' + auth.uid).exists()",
        ".write": "newData.child('members/' + auth.uid).exists()",
        "members": {
          "$userId": {
            "nickname": { ".validate": "newData.isString() && newData.val().length < 20" },
            "status": { ".validate": "newData.isBoolean()" }
          }
        },
        "createdAt": { ".validate": "newData.val() <= now && !data.exists()" },
        // can only be created by yourself
        "createdBy": { ".validate": "newData.val() === auth.uid && !data.exists()" }
      }
    },
    "messages": {
      "$roomId": {
        // anyone in this room can read and write
        ".read": "root.child('rooms/' + $roomId + '/members/' + auth.uid).exists()",
        ".write": "root.child('rooms/' + $roomId + '/members/' + auth.uid).exists()",
        "$messageId": {
          ".validate": "newData.hasChildren(['sentBy', 'createdAt', 'content'])",
          // can only sent by yourself
          "sentBy": { ".validate": "newData.val() === auth.uid" },
          "createdAt": { ".validate": "newData.val() <= now" },
          "content": { ".validate": "newData.isString() && newData.val().length > 0" }
        }
      }
    },
    "unread": {
      "$userId": {
        ".read": "auth !== null",
        ".write": "auth !== null",
        "$roomId": {
          ".validate": "newData.val() >= 0"
        }
      }
    },
    "presence": {
      "$userId": {
        // only user self can write
        ".write": "auth.uid === $userId"
      }
    },
    "users": {
      // anyone logged in can read
      ".read": "auth !== null",
      ".indexOn": ["type"],
      "$userId": {
        // only user self can write data
        ".write": "auth.uid === $userId",
        ".validate": "newData.hasChildren(['nickname', 'avatar', 'createdAt'])",
        "createdAt": { ".validate": "newData.val() <= now" },
        "nickname": { ".validate": "newData.isString() && newData.val().length < 20" }
      }
    },
    "agents": {
      ".read": "auth !== null",
      "$userId": {
        ".write": "auth.uid === $userId",
        ".validate": "newData.hasChildren(['avatar', 'verified', 'isMember', 'createdAt', 'paid', 'license','licenseIssueDate', 'nickname', 'lastName', 'firstName'])",
        "createdAt": { ".validate": "newData.val() <= now" },
        "verified": { ".validate": "newData.isBoolean()" },
        "isMember": { ".validate": "newData.isBoolean()" },
        "paid": { ".validate": "newData.isBoolean()" },
        "phone": {
          "$pid": {
            "type": { ".validate": "newData.isString() && newData.val().length > 0" },
            "phone": { ".validate": "newData.isString() && newData.val().length > 0" }
          }
        },
        "email": {
          "$eid": {
            "email": { ".validate": "newData.isString() && newData.val().length > 0" }
          }
        },
        "specialties": {
          "$sid": {
            "city": { ".validate": "newData.isString() && newData.val().length > 0" }
          }
        },
        "address": {
          "$aid": {
            "streetName": { ".validate": "newData.isString() && newData.val().length > 0" },
            "streetNumber": { ".validate": "newData.isString() && newData.val().length > 0" },
            "city": { ".validate": "newData.isString() && newData.val().length > 0" },
            "state": { ".validate": "newData.isString() && newData.val().length > 0" },
            "country": { ".validate": "newData.isString() && newData.val().length > 0" },
            "zip": { ".validate": "newData.isString() && newData.val().length > 0" }
          }
        }
      }
    },
    "buyerData": {
      "$userId": {
        // user self or agent who has access can read
        ".read": "auth.uid === $userId || root.child('users/' + auth.uid + '/type').val() === 'agent'",
        ".write": "auth.uid === $userId",
        "favoriteHouses": {
          "$fhId": {
            "id": { ".validate": "newData.isString() && newData.val().length > 0" },
            "createdAt": { ".validate": "newData.val() <= now" }
          }
        },
        "searches": {
          "$sId": {
            "searchTerm": { ".validate": "newData.isString() && newData.val().length > 0" },
            "searchAt": { ".validate": "newData.val() <= now" }
          }
        },
        "lastUpdate": { ".validate": "newData.val() <= now" }
      }
    }
  }
}
